@using FluentValidation
@using FluentValidation.Results

@code {
	[CascadingParameter]
	public EditContext EditContext { get; set; }

	private EditContext PreviousEditContext;
	private IEnumerable<IValidator> Validators;
	private ValidationMessageStore ValidationMessageStore;

	[Inject]
	private IServiceProvider ServiceProvider { get; set; }

	public async override Task SetParametersAsync(ParameterView parameters)
	{
		await base.SetParametersAsync(parameters);
		if (EditContext != PreviousEditContext)
			EditContextChanged();
	}

	void EditContextChanged()
	{
		PreviousEditContext = EditContext;
		ValidationMessageStore = new ValidationMessageStore(EditContext);

		CreateValidators();
		if (Validators.Any())
			HookUpEditContextEvents();
	}

	private void CreateValidators()
	{
		IEnumerable<Type> validatorTypes = ValidatorRepository.GetValidators(EditContext.Model.GetType());
		Validators = validatorTypes
			.Select(x => (IValidator)ServiceProvider.GetService(x));
	}

	private void HookUpEditContextEvents()
	{
		EditContext.OnValidationRequested += ValidationRequested;
		EditContext.OnFieldChanged += FieldChanged;
	}

	async void ValidationRequested(object sender, ValidationRequestedEventArgs args)
	{
		ValidationMessageStore.Clear();
		foreach (IValidator validator in Validators)
		{
			ValidationResult result = await validator.ValidateAsync(EditContext.Model);
			AddValidationResult(EditContext.Model, result);
		}
	}

	async void FieldChanged(object sender, FieldChangedEventArgs args)
	{
		FieldIdentifier fieldIdentifier = args.FieldIdentifier;
		ValidationMessageStore.Clear(fieldIdentifier);

		var propertiesToValidate = new string[] { fieldIdentifier.FieldName };
		var fluentValidationContext =
			new ValidationContext(
				instanceToValidate: fieldIdentifier.Model,
				propertyChain: new FluentValidation.Internal.PropertyChain(),
				validatorSelector: new FluentValidation.Internal.MemberNameValidatorSelector(propertiesToValidate)
			);

		foreach(IValidator validator in Validators)
		{
			ValidationResult result = await validator.ValidateAsync(fluentValidationContext);
			AddValidationResult(fieldIdentifier.Model, result);
		}
	}

	void AddValidationResult(object model, ValidationResult validationResult)
	{
		foreach(ValidationFailure error in validationResult.Errors)
		{
			var fieldIdentifier = new FieldIdentifier(model, error.PropertyName);
			ValidationMessageStore.Add(fieldIdentifier, error.ErrorMessage);
		}
	}


}