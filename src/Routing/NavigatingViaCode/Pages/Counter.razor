@page "/"
@page "/counter/{CurrentCount:int}"
@implements IDisposable
@inject NavigationManager NavigationManager

<h1>Counter value = @CurrentCount</h1>

<div class="form-check">
	<input @bind=@forceLoad type="checkbox" class="form-check-input" id="ForceLoadCheckbox" />
	<label class="form-check-label" for="ForceLoadCheckbox">Force page reload on navigate</label>
</div>

<div class="btn-group" role="group">
	<button @onclick=@( () => AlterBy(-1) ) class="btn btn-primary">-</button>
	<input value=@CurrentCount readonly class="form-control" />
	<button @onclick=@( () => AlterBy(1) ) class="btn btn-primary">+</button>
</div>
<a href="/Counter/0">Reset</a>

@code {
	[Parameter] public int CurrentCount { get; set; }

	bool forceLoad;

	void AlterBy(int adjustment)
	{
		int newCount = CurrentCount + adjustment;

		if (newCount > 5)
			NavigationManager.NavigateTo("https://ibm.com");

		NavigationManager.NavigateTo("/counter/" + newCount, forceLoad);
	}

	protected override void OnInitialized()
	{
		// Subscribe to the event
		NavigationManager.LocationChanged += LocationChanged;
		base.OnInitialized();
	}

	private void LocationChanged(object sender, LocationChangedEventArgs e)
	{
		string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
		System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
	}

	void IDisposable.Dispose()
	{
		// Unsubscribe from the event when our component is disposed
		NavigationManager.LocationChanged -= LocationChanged;
	}
}
